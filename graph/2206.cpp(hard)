#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>

using namespace std;

char map[1001][1001];
int visit[1001][1001][2];
int Next[4][2] = {
	{-1, 0}, { 1, 0}, {0, -1}, { 0, 1}
};
int n, m;

int bfs() {
	queue<pair<pair<int, int>, int>> q;
	q.push({{ 0,0 }, 1});
	visit[0][0][1] = 1;

	while (!q.empty()) {
		int cur_x = q.front().first.first;
		int cur_y = q.front().first.second;
		int wall = q.front().second;
		q.pop();
		if (cur_x == m-1 && cur_y == n-1) return visit[cur_y][cur_x][wall];

		for (int i = 0; i < 4; i++) {
			int dx = cur_x + Next[i][0];
			int dy = cur_y + Next[i][1];
			if (dx >= 0 && dy >= 0 && dx < m && dy < n) {
				if (map[dy][dx] == '1' && wall) {
					visit[dy][dx][wall - 1] = visit[cur_y][cur_x][wall] + 1;
					q.push({ {dx, dy}, wall - 1 });
				}

				if (map[dy][dx] == '0' && !visit[dy][dx][wall]) {
					visit[dy][dx][wall] = visit[cur_y][cur_x][wall] + 1;
					q.push({ {dx, dy}, wall });
				}
			}
		}
	}
	return -1;
}

int main() {
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		cin >> map[i];
	}

	cout << bfs() << '\n';
}
